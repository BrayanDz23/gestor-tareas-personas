{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TareaService = /*#__PURE__*/(() => {\n  class TareaService {\n    constructor(http) {\n      this.http = http;\n      this.tareas = [];\n      this.tareaParaEditar = new BehaviorSubject(null);\n      this.idCounter = 1; // Para generar IDs únicos\n    }\n\n    getTareas() {\n      return this.tareas;\n    }\n    addTarea(tarea) {\n      tarea.id = this.idCounter++; // Asignamos un ID único\n      this.tareas.push(tarea);\n    }\n    cargarTareasDesdeAPI() {\n      this.http.get('https://jsonplaceholder.typicode.com/todos?_limit=5').pipe(map(tareas => {\n        // Si el API devuelve tareas, las mapeamos; si no, creamos tareas ficticias\n        if (tareas && tareas.length > 0) {\n          return tareas.map(tarea => ({\n            id: tarea.id,\n            nombre: tarea.title,\n            fechaLimite: this.generarFechaFicticia(),\n            personas: this.generarPersonasFicticias(),\n            completada: tarea.completed\n          }));\n        } else {\n          // Generar tareas ficticias\n          return this.generarTareasFicticias();\n        }\n      })).subscribe(tareas => {\n        this.tareas = this.tareas.concat(tareas); // Agrega las tareas del API a la lista existente\n      });\n    }\n\n    generarTareasFicticias() {}\n    static {\n      this.ɵfac = function TareaService_Factory(t) {\n        return new (t || TareaService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: TareaService,\n        factory: TareaService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return TareaService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}