{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormArray, FormControl } from '@angular/forms';\nimport { TareaService } from '../../services/tarea.service';\nlet CrearTareaComponent = class CrearTareaComponent {\n  constructor(fb, tareaService) {\n    this.fb = fb;\n    this.tareaService = tareaService;\n    this.tareaForm = this.fb.group({\n      id: [0],\n      nombre: ['', [Validators.required, Validators.minLength(5)]],\n      fechaLimite: ['', Validators.required],\n      personas: this.fb.array([], this.validarNombresDuplicados()) // Validación de duplicados a nivel del FormArray\n    });\n  }\n\n  ngOnInit() {\n    this.tareaService.tareaParaEditar.subscribe(tarea => {\n      if (tarea) {\n        this.tareaForm.patchValue({\n          id: tarea.id,\n          nombre: tarea.nombre,\n          fechaLimite: tarea.fechaLimite\n        });\n        this.tareaForm.setControl('personas', this.fb.array(tarea.personas.map(persona => this.crearPersonaFormGroup(persona)), this.validarNombresDuplicados()));\n      }\n    });\n  }\n  // Obtener el FormArray de personas\n  get personas() {\n    return this.tareaForm.get('personas');\n  }\n  // Crear un FormGroup para cada persona\n  crearPersonaFormGroup(persona) {\n    return this.fb.group({\n      nombre: [persona ? persona.nombre : '', [Validators.required, Validators.minLength(5)]],\n      edad: [persona ? persona.edad : '', [Validators.required, Validators.min(18)]],\n      habilidades: this.fb.array(persona ? persona.habilidades.map(h => this.fb.control(h)) : [this.fb.control('', Validators.required)])\n    });\n  }\n  // Agregar una persona al FormArray\n  agregarPersona() {\n    this.personas.push(this.crearPersonaFormGroup());\n    this.personas.updateValueAndValidity(); // Actualizar validación al agregar persona\n  }\n  // Eliminar una persona del FormArray\n  eliminarPersona(index) {\n    this.personas.removeAt(index);\n    this.personas.updateValueAndValidity(); // Actualizar validación al eliminar persona\n  }\n  // Agregar una habilidad al FormArray de habilidades de una persona\n  agregarHabilidad(index) {\n    const habilidades = this.personas.at(index).get('habilidades');\n    habilidades.push(this.fb.control('', Validators.required));\n  }\n  // Eliminar una habilidad del FormArray de habilidades de una persona\n  eliminarHabilidad(personaIndex, habilidadIndex) {\n    this.personas.at(personaIndex).get('habilidades').removeAt(habilidadIndex);\n  }\n  // Validación personalizada para evitar nombres duplicados\n  validarNombresDuplicados() {\n    return formArray => {\n      const nombres = formArray.controls.map(control => control.get('nombre')?.value?.toLowerCase()); // Convertir a minúsculas para comparación\n      const nombresUnicos = new Set(nombres);\n      if (nombresUnicos.size !== nombres.length) {\n        return {\n          nombresDuplicados: true\n        }; // Retorna un error si hay duplicados\n      }\n\n      return null; // Retorna null si no hay errores\n    };\n  }\n  // Guardar la tarea, validando todos los campos\n  guardarTarea() {\n    if (this.tareaForm.invalid) {\n      // Marcar todos los campos como tocados para mostrar las validaciones\n      this.marcarTodosComoTocados(this.tareaForm);\n      return; // No continuar si el formulario es inválido\n    }\n\n    const tarea = {\n      id: this.tareaForm.value.id,\n      nombre: this.tareaForm.value.nombre,\n      fechaLimite: this.tareaForm.value.fechaLimite,\n      personas: this.tareaForm.value.personas,\n      completada: false\n    };\n    if (tarea.id) {\n      this.tareaService.updateTarea(tarea); // Actualizar tarea existente\n    } else {\n      this.tareaService.addTarea(tarea); // Agregar nueva tarea\n    }\n\n    this.tareaForm.reset();\n  }\n  // Marcar todos los campos y subcampos como tocados\n  marcarTodosComoTocados(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl) {\n        control.markAsTouched({\n          onlySelf: true\n        });\n      } else if (control instanceof FormGroup || control instanceof FormArray) {\n        this.marcarTodosComoTocados(control);\n      }\n    });\n  }\n};\nCrearTareaComponent = __decorate([Component({\n  selector: 'app-crear-tarea',\n  templateUrl: './crear-tarea.component.html',\n  styleUrls: ['./crear-tarea.component.scss']\n}), __metadata(\"design:paramtypes\", [FormBuilder, TareaService])], CrearTareaComponent);\nexport { CrearTareaComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}