{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TareaService } from '../../services/tarea.service';\nlet CrearTareaComponent = class CrearTareaComponent {\n  constructor(fb, tareaService) {\n    this.fb = fb;\n    this.tareaService = tareaService;\n    this.tareaForm = this.fb.group({\n      nombre: ['', [Validators.required, Validators.minLength(5)]],\n      fechaLimite: ['', Validators.required],\n      personas: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.cargarTareaParaEditar();\n  }\n  get personas() {\n    return this.tareaForm.get('personas');\n  }\n  crearPersonaFormGroup(persona) {\n    return this.fb.group({\n      nombre: [persona ? persona.nombre : '', [Validators.required, Validators.minLength(5)]],\n      edad: [persona ? persona.edad : '', [Validators.required, Validators.min(19)]],\n      habilidades: this.fb.array(persona && persona.habilidades ? persona.habilidades.map(h => this.fb.control(h, Validators.required)) : [this.fb.control('', Validators.required)])\n    });\n  }\n  agregarPersona() {\n    this.personas.push(this.crearPersonaFormGroup());\n  }\n  eliminarPersona(index) {\n    this.personas.removeAt(index);\n  }\n  agregarHabilidad(index) {\n    this.personas.at(index).get('habilidades').push(this.fb.control('', Validators.required));\n  }\n  eliminarHabilidad(personaIndex, habilidadIndex) {\n    this.personas.at(personaIndex).get('habilidades').removeAt(habilidadIndex);\n  }\n  guardarTarea() {\n    if (this.tareaForm.valid) {\n      const nuevaTarea = {\n        id: this.tareaService.tareaParaEditar ? this.tareaService.tareaParaEditar.id : Math.floor(Math.random() * 1000),\n        nombre: this.tareaForm.value.nombre,\n        fechaLimite: this.tareaForm.value.fechaLimite,\n        personas: this.tareaForm.value.personas,\n        completada: false\n      };\n      if (this.tareaService.tareaParaEditar) {\n        // Si hay una tarea para editar, la actualiza\n        this.tareaService.editarTarea(nuevaTarea);\n        this.tareaService.tareaParaEditar = null; // Limpia la tarea para editar\n      } else {\n        // Si no hay, aÃ±ade una nueva tarea\n        this.tareaService.addTarea(nuevaTarea);\n      }\n      this.limpiarFormulario(); // Limpia el formulario\n    }\n  }\n\n  limpiarFormulario() {\n    this.tareaForm.reset();\n    this.personas.clear();\n  }\n  cargarTareaParaEditar() {\n    const tarea = this.tareaService.tareaParaEditar;\n    if (tarea) {\n      this.tareaForm.patchValue({\n        nombre: tarea.nombre,\n        fechaLimite: tarea.fechaLimite\n      });\n      this.personas.clear();\n      tarea.personas.forEach(persona => {\n        this.personas.push(this.crearPersonaFormGroup(persona));\n      });\n    }\n  }\n};\nCrearTareaComponent = __decorate([Component({\n  selector: 'app-crear-tarea',\n  templateUrl: './crear-tarea.component.html',\n  styleUrls: ['./crear-tarea.component.css']\n}), __metadata(\"design:paramtypes\", [FormBuilder, TareaService])], CrearTareaComponent);\nexport { CrearTareaComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}